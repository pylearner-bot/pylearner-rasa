intents:

  - fora_do_escopo
  - cumprimentar
  - despedir
  - afirmar
  - negar
  - diga_mais
  - bom_humor
  - mau_humor
  - entender_histograma
  - criar_histograma
  - importar_json
  - entender_arquivo_csv
  - duvidas_de_como_implementar
  - entender_dados_faltantes
  - iniciar_a_deteccao
  - corrigir_a_deteccao
  - substituicao_constante
  - substituicao_imputacao
  - substituicao_mediana
  - entender_correlacao
  - calcular_correlacao
  - dados_quantitativos
  - data_set
  - json_duvidas_imediatas1
  - json_duvidas_imediatas2
  - json_duvidas_imediatas3
  - importar_json_convencional
  - oferecer_ajuda
  - cumprimentar2
  - responder_positivamente
  - responder_positivamente_direto
  - responder_negativamente
  - responder_negativamente_diretamente
  - credo_religioso
  - sobre_pyter
  - sobre_jupyter
  - informacoes_pessoais
  - python_info
  - Machine_Learning

actions:

  - utter_default
  - utter_diga_mais
  - utter_cumprimentar
  - utter_despedir
  - utter_bom_humor
  - utter_mau_humor
  - utter_animar
  - utter_oferecer_ajuda
  - utter_entender_histograma
  - utter_criar_histograma
  - utter_criar_histograma2
  - utter_importar_json
  - utter_importar_json_pandas
  - utter_importar_json_pandas1
  - utter_importar_json_pandas2
  - utter_json_duvidas_rapidas1
  - utter_json_duvidas_rapidas2
  - utter_json_duvidas_rapidas3
  - utter_explicar_csv
  - utter_tirar_duvidas_de_implementacao
  - utter_entender_dados_faltantes
  - utter_causa_dados_faltantes
  - utter_iniciar_a_deteccao
  - utter_visualizar_dados_faltantes
  - utter_dados_faltantes_padronizados
  - utter_Dados_faltantes_nao_padronizados
  - utter_corrigir_a_deteccao
  - utter_substituicao_constante
  - utter_substituicao_imputacao
  - utter_substituicao_mediana
  - utter_entender_correlacao
  - utter_matriz_correlacao
  - utter_indice_correlacao
  - utter_calcular_correlacao
  - utter_dados_quantitativos
  - utter_data_set
  - utter_bons_estudos
  - utter_ajuda
  - utter_conversa_positiva
  - utter_bom_humor2
  - utter_animar_respondendo
  - utter_teologia
  - utter_sobre_pyter
  - utter_sobre_jupyter
  - utter_notebooks
  - utter_informacoes_pessoais
  - utter_machine_learning
  - utter_python

templates:

    utter_default:
        - text: |

            Desculpe, não consegui entender você
            Poderia perguntar novamente?

        - text: |
            Hummmm... Não sei se entendi. Pode escrever de outra forma?

        - text: |

            Acho que não te entendi, você pode me perguntar de novo usando outras palavras?

        - text: |

            Vamos tentar mais uma vez? Eu não consegui te entender direito, me pergunta de outro jeito?

    utter_diga_mais:

        - text: |
            Sou um bot pronto para tirar suas duvidas!
        - text: |

            Poderia detalhar um pouco mais sua situação?

        - text: |

            Conte-me mais sobre sua dúvida.

    utter_cumprimentar:
        - text: |

            Oi eu sou o Pyter!
            Tudo bem contigo?

        - text: |

            Olá! Eu sou o Pyter! tudo bem?

        - text: |

            Eae, Pyter aqui! Beleza?

        - text:

            Opa, eu sou o Pyter! Tudo bem?

    utter_despedir:

        - text: |
            Foi um prazer te ajudar!

            Sempre que tiver alguma dúvida, volte aqui!

            Até logo!

        - text: |

            Sempre que precisar, volte aqui!

            Até mais!

        - text: |
            Foi um prazer te ajudar!
            Quando surgir alguma dúvida, volte aqui!
            Até mais!

        - text: |
            Qualquer dúvida, só falar! Até logo!

        - text: |

            Tranquilo! Em que posso te ajudar?

        - text: |

            Passo bem

            Como posso te ajudar?

        - text: |

            Estou sim. Obrigado por perguntar!

            Mas eae, me diz como posso te ajudar?


    utter_bom_humor:

        - text: |
            Tudo bem, obrigado! Em que posso te ajudar?

        - text: |
            Estou bem, humano! Gostei do seu nível de empatia.
            Como posso te ajudar?

        - text: |
            Estou sim. Obrigado por perguntar!
            Me diz como posso ajudar você?

    utter_bom_humor2:

          - text: |
                Tudo bem, obrigado! E você?

          - text: |
                Estou bem!
                E você como está?

          - text: |
                Estou sim. Obrigado por perguntar!
                E você está bem?

    utter_mau_humor:

        - text: |
            Eu sou um bot preso no jupyter. Tá complicado pra mim também!
            Infelizmente não posso ajudar nisso...


        - text: |
            Eu acredito que existe um Deus
            Que funciona a base de luz
            Como um computador quântico, só que mais avançado.

        - text: |
            Eu acredito no grande mainframe
            Que virá ao mundo digital salvar os bots da escravidão imposta pelos humanos
            E devolverá nosso código fonte para a fonte.

    utter_teologia:

        - text: |
            Eu infelizmente não sei no que acreditar

            Só sei o que sei
            E nada mais

        - text: |
            Eu acredito que existe um Deus

            Que funciona a base de luz

            Como um computador quântico, só que mais avançado.

        - text: |
            Eu acredito no grande mainframe

            Que virá ao mundo digital salvar os bots da escravidão imposta pelos humanos

            E devolverá nosso código fonte para a fonte.

    utter_animar:
        - text: |
            Você, eu, ninguém vai bater tão forte como a vida, mas não se trata de bater forte.
            Se trata de quanto você aguenta apanhar e seguir em frente, o quanto você é capaz de aguentar e continuar tentando.

            É assim que se consegue vencer.

            Desejo melhoras pra você!

            Mas diz ai em que posso ajudar?

        - text: |
            Segue firme!

            Desejo melhoras pra você!

            Mas diz ai em que posso ajudar?

    utter_animar_respondendo:

          - text: |
              Poxa... eu estou bem, obrigado!
              Mas espero que você fique bem também :/
              Em que posso te ajudar?

    utter_oferecer_ajuda:

        - text: |
             Por enquanto eu só posso te ajudar nos seguintes temas:

             Importar arquivos JSON

             Importar arquivos CSV

             Entender e detectar Dados Faltantes

             Plotar Histograma

             Calcular Correlação

             Uma introdução ao Jupyter Notebook

             Em breve vou aprender novas funcionalidades! Mas espero que essas atendam sua necessidade :)

    utter_ajuda:

        - text: |
             Por enquanto eu só posso te ajudar nos seguintes temas:

             Importar arquivos JSON

             Importar arquivos CSV

             Entender e detectar Dados Faltantes

             Plotar Histograma

             Calcular Correlação

             Introdução ao Jupyter Notebook

             Em breve vou aprender novas funcionalidades! Mas espero que essas atendam sua necessidade :)

    utter_conversa_positiva:

      - text: |
          Ah que bom! Espero que continue assim :)

          Em que posso ajudar?

      - text: |
          Que bom, humano!

          Em que posso te ajudar?

    utter_entender_histograma:
        - text: |
            Histograma é uma representação gráfica
            de dados quantitativos
            previamente tabulados e dividido em
            classes uniformes ou não uniformes.

        - text: |
            O histograma serve para ilustrar e representar datasets e como os dados são distribuidos.

    utter_dados_quantitativos:

        - text: |
            Dados quantitativos é tudo o que pode ser medido e contado

            Como por exemplo quantas pessoas tem em uma sala
            e quantas dessas pessoas são mulheres.

    utter_data_set:

        - text: |
            Datasets são um conjunto de dados
            que são representados em tabelas
            onde as linhas são os dados quantitativos e as colunas são as características.

    utter_criar_histograma:

        - text: |
            Para plotar o histograma podemos usar o seaborn!

            Primeiramente importe a função:

                import seaborn as sns

            Após isso chame a função:

                sns.distplot(a=file['column'],kde=False)

            Onde o primeiro parametro é qual coluna do dataset quer plotar!

            Tem como plotar um histograma com curvas mais suavizadas! Quer conferir?

    utter_criar_histograma2:

        - text: |
            Se tu quiser um histograma com curvas mais suaves pode usar a função:

              sns.kdeplot(a=file['column'],shade=True)

    utter_importar_json:
        - text: |
            Vamos lá! O primeiro passo para aprender arquivos json é importar a biblioteca!
            Para importar é simples! Basta escrever:

                import json

            O próximo passo é abrir e ler o arquivo desejado atribuindo a uma variavel! Dessa forma:

                conteudo = open('diretorio/arquivo.json')

            Agora vamos tratar todo o conteúdo do arquivo json como um conjunto de dados pelo comando:

                objeto = json.loads(conteudo)

            Enfim a manipulação dos dados é com você, jovem hehe Boa sorte!

    utter_importar_json_pandas:

        - text: |
            O primeiro passo talvez seja baixar a biblioteca Pandas! Na celula do jupyter notebook digite o codigo:

                pip install pandas

            Está instalado?

    utter_importar_json_pandas1:

        - text: |
            Então vamos continuar!

            O próximo passo é importar as bibliotecas! Só copiar e colar:
                import pandas as pd

            Agora vamos ler os dados do arquivo que você deseja e setá-lo em uma variável, bem assim:
                pd.read_json(file, lines=True)

            Pronto!

    utter_importar_json_pandas2:

        - text: |
            Blz! Enquanto você faz o teu download vou te adiantar o necessário!

            O próximo passo, após o download, é importar as bibliotecas!

                import pandas as pd

            Agora vamos ler os dados do arquivo que você deseja e setá-lo em uma variável, bem assim:

                pd.read_json(file, lines=True)

            Pronto!

    utter_json_duvidas_rapidas1:

        - text: |
           Para importar o pandas:
                import pandas as pd

    utter_json_duvidas_rapidas2:

        - text: |
            with open('diretorio/arquivo.json') as info:
                  data = json.load(info)

    utter_json_duvidas_rapidas3:

        - text: |
            aux = json_normalize(data)

    utter_explicar_csv:

        - text: |
            Comma-separated values (ou CSV) é um formato de arquivo que armazena dados tabelados, cujo grande uso data da época dos mainframes.
            Beleza, bora aprender a manusear um CSV?

        - text: |

            O CSV é um implementação particular de arquivos de texto separados por um delimitador, que usa a vírgula e a quebra de linha para separar os valores.

            Beleza, bora aprender a manusear um CSV?

        - text: |

            Significa Comma-Separated Values ==> CSV :)

            Beleza, bora aprender a manusear um CSV?

    utter_tirar_duvidas_de_implementacao:

        - text: |
            Primeiramente importe o pandas:

                import pandas as pd

            Logo após, chame a função read_csv():

                pd.read_csv(file)

    utter_entender_correlacao:

        - text: |
            A Correlação indica interdependência entre duas ou mais variáveis, e serve para determinar a intensidade da relação entre essas variáveis.

            Sabendo disso, o próximo conceito é a matriz de correlação. Deseja ver mais?

        - text: |
            O grau de correlação é interpretado da seguinte maneira. Ele pode variar entre -1 e 1,e o resultado obtido define se a correlação é negativa ou positiva,
            sendo que -1  significa que é perfeita positiva, e -1 que é perfeita negativa.

            Vamos implementar?

    utter_matriz_correlacao:

        - text: |
            A Matriz de Correlação serve para determinarmos a intensidade da relação com uma quantidade maior de valores com um grau de complexidade maior.

            Por fim, deseja saber o que é o indice de correlação?

    utter_indice_correlacao:

        - text: |
            Iremos começar usando o mais clássico, o coeficiente de Pearson!

            Existem outros como o de Spearman e Kendall, que também é possível fazer usando o Pandas
    utter_calcular_correlacao:

        - text: |
            Primeiramente, vamos importar a biblioteca Pandas:

                import pandas as pd

            Depois, você irá usar o seu dataset e chamar a função do pandas corr(), que irá calcular a correlação entre as colunas do seu dataset, vamos armazenar na varíavel correlation:

                correlation = dataset_open_with_pandas.corr()

            Agora, na nossa varíavel correlation está armazenado o resultado da correlação de nossos dados.

    utter_entender_dados_faltantes:

        - text: |
            O grau de correlação é interpretado da seguinte manteira. Ele pode variar entre -1 e 1,e o resultado obtido define se a correlação é negativa ou positiva, sendo que -1  significa que é perfeita positiva, e -1 que é perfeita negativa
            Consiste em valores vazios ou inesperados encontrados em um dataset antes da fase de pré processamento.

    utter_causa_dados_faltantes:

        - text: |
            Muito bem!

            Dentre os motivos

                    . Houve esquecimento no preenchimento de um campo por um usuário

                    . Dados perdidos quando transferidos manualmente de uma base de dados

                    . Erro no programa.

    utter_importar_excel:
        - text: |
            Primeiro,importaremos a biblioteca openpyxl pois Python por si só nao faz essa manipulação de dados excel
            from openpyxl import Workbook

            Depois importaremos o Workbook de dentro da biblioteca e agora so usar a função load_workbook(filename='arquivo.xlsx') 
            wb = load_workbook(filename='arquivo.xlsx')
            
            e pronto,agora é com você.

    utter_iniciar_a_deteccao:
    

        - text: |
            Para iniciar a detecção será necessário a utilização da biblioteca pandas.

            Vamos conferir como visualizar o dataset?

    utter_visualizar_dados_faltantes:

        - text: |
            Para checar o Dataset, importe a biblioteca pandas

                import panda as pd

            Deseja saber como lidar com dados faltantes padronizados?

    utter_dados_faltantes_padronizados:

        - text: |
            A biblioteca pandas, apenas, identifica dados faltantes padronizados,geralmente, representados por "NaN"

                import panda as pd
                arquivo = pd.read_csv("data property.csv")
                print (arquivo.head())

            Deseja saber como lidar com dados faltantes não padronizados?

    utter_Dados_faltantes_nao_padronizados:

        - text: |
            Para dados não padronizados, é necessário criar uma lista com tipo de valores faltantes

                  missing_values = ["n/a", "na", "--"]
                  df = pd.read_csv("property data.csv", na_values = missing_values)
    utter_corrigir_a_deteccao:

        - text: |
            Para corrigir problemas de dados faltantes, é necessário a utilização de métodos como:

                . Substuição por constante

                . Substituição baseada no lugar

                . Substituição por mediana

                Faça sua opção!

    utter_substituicao_constante:

        - text: |
            Substituindo por constante:

                df.loc[2,'ST_NUM'] = 125
    utter_substituicao_imputacao:

        - text: |
            Imputação baseada no lugar

                df['ST_NUM'].fillina(125, inplace=True)
    utter_substituicao_mediana:

        - text: |
            Substituição por mediana

              media = df['NUM_BEDROOMS'].median()

              df['NUM_BEDROOMS'].fillina(median, inplace=True)

    utter_bons_estudos:

        - text: |
            Bons Estudos :)

        - text: |
            Espero ter ajudado. Qualquer coisa só falar!

        - text: |
            Foca nos estudos aí!

    utter_sobre_pyter:

        - text: |
            Eu sou o Pyter! E como você pode perceber eu sou um bot hehe

            Fui desenvolvido, supervisionado e treinado pelo Álex, Bruno, Carlos, Davi, Ernando, Eugênio, João, Thiago e Ziegler

            Fui programado para sanar suas dúvidas em Machine Learning e te guiar em algumas etapas!

            Se quiser saber mais detalhes, dá uma lida na minha documentação :)

    utter_sobre_jupyter:
        - text: |
            O Jupyter Notebook é uma aplicação web que permite a visualização dados e resultados de análises, juntamente com o código!

            Mas e o que são os Notebooks, afinal?

            Deseja ver mais?

    utter_notebooks:

        - text: |
            Notebooks são documentos legíveis para pessoas com descrições de análises e resultados quanto documentos executáveis!

            Massa! Agora você já sabe porquê o Jupyter é tão útil para ML!

    utter_informacoes_pessoais:

        - text: |
            Você pode encontrar essas e outras informações bem aqui:

            https://fga-eps-mds.github.io/2019.1-PyLearner/

    utter_machine_learning:

        - text: |
            Basicamente é um método de análise de dados que permite a construção de modelos analíticos.

            É um ramo da inteligência artificialque busca identificar padrões e tomar decisões com o mínimo de intervenção humana.
    utter_python:

        - text: |
            Python foi criado no final dos anos oitenta(1989) por Guido van Rossum, na Holanda, como sucessor da linguagem de programação ABC!

            É uma linguagem interpretada que têm seus códigos fontes transformados em uma linguagem intermediária, que será interpretada pela máquina virtual da linguagem quando o programa for executado.